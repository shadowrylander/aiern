#!/usr/bin/env mdsh

# TODO: Implement saku as well

#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity 0444) :noweb yes :mkdirp yes

# Adapted From:
# Answer: https://stackoverflow.com/a/65232183/10827766
# User: https://stackoverflow.com/users/776405/whil
#+startup: show3levels

#+name: username
#+begin_src text :exports none
shadowrylander
#+end_src

#+name: hash-deprecated
#+begin_src emacs-lisp :var name="" :exports none
(md5 (concat (replace-regexp-in-string "/" "" (
    org-format-outline-path (org-get-outline-path))) (
        nth 4 (org-heading-components)) name))
#+end_src

#+name: hash
#+begin_src emacs-lisp :exports none
(format-time-string "%Y%m%d%H%M%S%N")
#+end_src

* current projects

# !!! Local projects are in the `inca' directory !!!

#+call: hash() :exports none

#+RESULTS:
: 20210601181716264678600

#+name: 20210601181716264678600
#+begin_src text
<<username>>/<<username>> ~/<<username>>/home/<<username>>
#+end_src

* makefile

#+call: hash() :exports none

#+RESULTS:
: 20210601181725825830000

#+name: 20210601181725825830000
#+begin_src makefile :tangle makefile
.RECIPEPREFIX := |

init:
|-git clone --recurse-submodule https://github.com/<<20210601181716264678600>>
.DEFAULT_GOAL := init

rebuild:
|chmod +x ./wheee
|./wheee --use-hash ${HASH} -H make

switch:
|chmod +x ./wheee
|./wheee --use-hash ${HMASH} -H make --home-manager
|./wheee --use-hash ${RMASH} -H make --home-manager

# doom-set:
# |rsync -avvczz --delete ~/<<username>>/home/.doom.d/ ~/.doom.d/
# |chmod +x ~/.doom.d/org-tangle
# |yes yes| ~/.doom.d/org-tangle ~/<<username>>/doom.aiern.org
# |yes yes| ~/.doom.d/org-tangle ~/<<username>>/home/.doom.d/aiern/README.org
# |rsync -avvczz --delete ~/<<username>>/home/.doom.d/ ~/.doom.d/

# doom-sync:
# |~/.emacs.d/bin/doom sync

# doom-check:
# |~/.emacs.d/bin/doom doctor

# doom-test:
# |emacs ~/<<username>>/doom.aiern.org

# doom-pre: doom-set doom-sync doom-check

# doom: doom-pre doom-test

# doom-upgrade: doom-pre
# |printf "n\ny\n" | ~/.emacs.d/bin/doom upgrade

# doom-super: doom-set doom-sync doom-check doom-upgrade doom-sync doom-check doom-test

emacs-copy:
|rsync -avvczz ~/<<username>>/home/.emacs.d/ ~/.emacs.d/

tangle-setup: emacs-copy
|chmod +x ~/.emacs.d/org-tangle
|yes yes| ~/.emacs.d/org-tangle ~/<<username>>/damascus.aiern.org
|rsync -avvczz ~/<<username>>/home/.emacs.d/ ~/.emacs.d/

tangle-damascus: tangle-setup
# Adapted From:
# Answer: https://askubuntu.com/a/338860/1058868
# User: https://askubuntu.com/users/1366/lesmana
# From:
# Answer: https://askubuntu.com/a/446480/1058868
# User: https://askubuntu.com/users/267867/peter-w-osel
|yes yes | ~/.emacs.d/org-tangle ~/<<username>>/damascus.aiern.org

tangle: tangle-setup
# Adapted From:
# Answer: https://askubuntu.com/a/338860/1058868
# User: https://askubuntu.com/users/1366/lesmana
# From:
# Answer: https://askubuntu.com/a/446480/1058868
# User: https://askubuntu.com/users/267867/peter-w-osel
|yes yes | ~/.emacs.d/org-tangle ~/<<username>>/*.aiern.org
|yes yes | ~/.emacs.d/org-tangle ~/<<username>>/README.org

tangle-all: tangle

emacs-setup: tangle-damascus emacs-copy

emacs: emacs-setup
|emacs ~/<<username>>/damascus.aiern.org

push:
|git -C ~/<<username>> add .
|-git -C ~/<<username>> commit --allow-empty-message -am ""
|-git -C ~/<<username>> push

push-all: push
#+end_src

* previous projects
** bakery

My pride and joy; based off of [[https://github.com/amoffat][Andrew Moffat's]] [[https://amoffat.github.io/sh/][sh]],
this python module allows you to import shell commands as modules as well. For example:

# How does the code below work exactly, again? Revise it!

#+begin_src python
<<20210601181755824433500>>
<<20210601181800630609300>>
<<20210601181804730771100>>
#+end_src

You might be thinking to yourself, "Cool!" And also, "...Wait what?"

*** breaking it down

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181755824433500

#+name: 20210601181755824433500
#+begin_src python
from baker.y import git
#+end_src

This will import the =git= utility from your path as a =bakery= object;
note, however, that while the statement is importing =git= from =baker.y=,
there are actually two submodules in play here: =baker= with a =y=,
and =baker= with an =i=.

To facilitate the use of =git(C = [path]).status()=, the latter submodule must be used.
This also prevents the use of something like =git()=, but, since that just shows the help text,
one can simply use =git.help()= instead.

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181800630609300

#+name: 20210601181800630609300
#+begin_src python
git.clone(
    b = "master",
    recurse_submodule = True,
    "https://github.com/<<username>>/<<username>>",
    "~/<<username>>",
    _run = True,
)
#+end_src

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181804730771100

#+name: 20210601181804730771100
#+begin_src python
print(git(C = "~/<<username>>").status())
#+end_src

*** want more information?

Get it here! https://gitlab.com/picotech/bakery

Also: eh heh heh... yeah... I like =gitlab's= grouping system... */sheepish grin/*
