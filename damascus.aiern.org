#+setupfile: ./README.org
#+include: ./README.org

This can be used with =GNU Stow= as well! :D

The tangle functions are adapted from [[https://emacs.stackexchange.com/a/29884/31428][this answer on the emacs Stack Exchange]],
which was written by [[https://emacs.stackexchange.com/users/2710/andrew-swann][Andrew Swann]].

* home
** .emacs.d
*** early-init.el

Adapted From: https://github.com/hlissner/doom-emacs/blob/develop/early-init.el

#+call: hash() :exports none

#+RESULTS:
: 20210604182053300746900

#+name: 20210604182053300746900
#+begin_src emacs-lisp :tangle (aiern/tangle-path)
;;; early-init.el -*- lexical-binding: t; -*-

;; Emacs 27.1 introduced early-init.el, which is run before init.el, before
;; package and UI initialization happens, and before site files are loaded.

;; A big contributor to startup times is garbage collection. We up the gc
;; threshold to temporarily prevent it from running, then reset it later by
;; enabling `gcmh-mode'. Not resetting it will cause stuttering/freezes.
(setq gc-cons-threshold most-positive-fixnum)

;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)

;; Ensure Doom is running out of this file's directory
(setq user-emacs-directory (file-name-directory load-file-name))
#+end_src

*** init.el

#+call: hash() :exports none

#+RESULTS:
: 20210601225233511900800

#+name: 20210601225233511900800
#+begin_src emacs-lisp
(when (aiern/any-popup-showing-p) (aiern/which-key--hide-popup))) :post (progn (unless hydra-curr-map (aiern/which-key--show-popup))
#+end_src

#+call: hash() :exports none

#+RESULTS:
: 20210601225227507463400

#+name: 20210601225227507463400
#+begin_src emacs-lisp :tangle (aiern/tangle-path)
;;; $EMACSDIR/config.el -*- lexical-binding: t; -*-
(setq straight-use-package-by-default t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)

(load-file "../.doom.d/help+20.el")
(setq confirm-kill-emacs nil)

(use-package rainbow-delimiters :straight t)

(with-eval-after-load 'rainbow-delimiters (load-file "../.doom.d/aiern/aiern.el")
    ;; From: https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation
    (if (and (fbatp 'native-comp-available-p) (native-comp-available-p))
        (message "Native compilation is available")
        (message "Native complation is *not* available"))
    (if (fbatp 'json-serialize)
        (message "Native JSON is available")
        (message "Native JSON is *not* available")))

;; Adapted From:
;; From: https://emacs.stackexchange.com/a/19507
;; User: https://emacs.stackexchange.com/users/50/malabarba
;; (setq byte-compile-warnings (not t))
;; (setq byte-compile warnings (not obsolete))

;; From: https://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/
;; (setq initial-major-mode 'org-mode)

;; (add-to-list 'org-src-lang-modes '("nix-repl" . nix-mode))
;; (org-babel-do-load-languages 'org-babel-load-languages '((nix-mode . t)))
;; (json (if (assoc :json params) (nth (+ (cl-position :json params) 1) params) nil))
;; (optargs (if (assoc '-- params) (nthcdr (+ (cl-position '-- params) 1) params) nil))
;; (if (or (eq json nil) (<= json 0)) "" "--json")
;; (if optargs (format "%s" optargs) "")
;; (format "%s" (cdr params))

;; Follow symlinks
(setq vc-follow-symlinks t)

;; Use Python Syntax Highlighting for ".xonshrc" files
;; (setq auto-mode-alist 
;;       (append '(".*\\.xonshrc\\'" . python-mode)
;;               auto-mode-alist))
;; (setq auto-mode-alist 
;;       (append '(".*\\.xsh\\'" . python-mode)
;;              auto-mode-alist))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; Adapted From: https://www.reddit.com/r/emacs/comments/8fz6x2/relative_number_with_line_folding/dy7lmh7?utm_source=share&utm_medium=web2x&context=3
;; (display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)

;; Adapted From:
;; Answer: https://unix.stackexchange.com/a/152151
;; User: https://unix.stackexchange.com/users/72170/ole
;; No more typing the whole yes or no. Just y or n will do.
;; Makes *scratch* empty.
(setq initial-scratch-message "")

;; Removes *scratch* from buffer after the mode has been set.
(defun aiern/remove-scratch-buffer nil
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'aiern/remove-scratch-buffer)

;; Removes *messages* from the buffer.
(setq-default message-log-max nil)
(kill-buffer "*Messages*")

;; Removes *Completions* from buffer after you've opened a file.
(add-hook 'minibuffer-exit-hook
      '(lambda nil
         (let ((buffer "*Completions*"))
           (and (get-buffer buffer)
                (kill-buffer buffer)))))

;; Don't show *Buffer list* when opening multiple files at the same time.
(setq inhibit-startup-buffer-menu t)

;; Show only one active window when opening multiple files at the same time.
(add-hook 'window-setup-hook 'delete-other-windows)

(fset 'yes-or-no-p 'y-or-n-p)

;; From: https://kundeveloper.com/blog/autorevert/
;; Auto revert files when they change
(global-auto-revert-mode t)
;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; (add-hook #'find-file-hook #'aiern/set-buffer-save-without-query)

;; The following avoids being ask to allow the file local
;; setting of `buffer-save-without-query'.
;; IMHO it is not a big risk:
;; The malicious code that must not be saved
;; should never be allowed to enter Emacs in the first place.
;; (put 'buffer-save-without-query 'safe-local-variable #'booleanp)

(setq user-full-name "Jeet Ray"
      user-mail-address "aiern@protonmail.com")

(load-theme 'exo-ui-red-dark)

;; use-package
<<20210601225235077502200>>

;; keys
<<20210603105149525867500>>

;; modal-modes
;; (add-hook! after-init 'aiern/disable-all-modal-modes)

;; hercules
<<20210601225307809867100>>

;; ryo modal
<<20210601225309546041800>>

;; evil
<<20210601225311301844400>>

;; god mode
<<20210601225312959948800>>

;; xah-fly-keys
<<20210601225314671168300>>

;; objed
<<20210601225316366565400>>

;; kakoune
<<20210601225318002941000>>

;; modalka
<<20210601225319683820700>>

;; org-mode
<<20210601225236550932600>>

;; minibuffer
<<20210601225321180742600>>

;; git
<<20210601225324176915500>>

;; buffer
<<20210601225332587709700>>

;; terminal
<<20210601225334126963400>>

;; window manager
<<20210601225346472879400>>

;; system
<<20210601225349590264700>>

;; etc
<<20210601225354262898500>>
#+end_src

**** use-package

#+call: hash() :exports none

#+RESULTS:
: 20210601225235077502200

#+name: 20210601225235077502200
#+begin_src emacs-lisp
;; <<20210601225231422834500>>

;; From: https://github.com/hartzell/straight.el/commit/882649137f73998d60741c7c8c993c7ebbe0f77a#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R1649
;; (setq straight-disable-byte-compilation t)

;; Adapted From: https://github.com/jwiegley/use-package#use-package-chords
;; Important: https://github.com/noctuid/general.el/issues/53#issuecomment-307262154
(use-package use-package-chords
    :demand t
    :hook (after-init . key-chord-mode)
    :straight t)
(use-package hydra
    :straight t
    :demand t
    :custom (hydra-hint-display-type 'lv))
(use-package use-package-hydra
    :demand t
    :straight (use-package-hydra :type git :host gitlab :repo "picotech/use-package-hydra" :branch "master"))
(use-package use-package-hydra+
    :demand t
    :straight (use-package-hydra+ :type git :host gitlab :repo "picotech/use-package-hydra-plus" :branch "master"))
(use-package use-package-hercules
    :demand t
    :straight (use-package-hercules :type git :host gitlab :repo "<<username>>/use-package-hercules" :branch "master"))
#+end_src

***** always defer package loading

Quoted from [[Use-Package's Loading packages in sequence
][https://github.com/jwiegley/use-package#loading-packages-in-sequence]]:

#+begin_quote
NOTE: pay attention if you set use-package-always-defer to t, and also use the :after keyword, as you will need to specify how the
declared package is to be loaded: e.g., by some :bind. If you're not using one of the mechanisms that registers autoloads, such as
:bind or :hook, and your package manager does not provide autoloads, it's possible that without adding :defer 2 to those declarations,
your package will never be loaded.
#+end_quote

Quoted from [[Use-Package's Notes about lazy loading][https://github.com/jwiegley/use-package#notes-about-lazy-loading]]:

#+begin_quote
In almost all cases you don't need to manually specify :defer t. This is implied whenever :bind or :mode or :interpreter is used.
Typically, you only need to specify :defer if you know for a fact that some other package will do something to cause your package to
load at the appropriate time, and thus you would like to defer loading even though use-package isn't creating any autoloads for you.
You can override package deferral with the :demand keyword. Thus, even if you use :bind, using :demand will force loading to occur
immediately and not establish an autoload for the bound key.
#+end_quote

Quoted from [[Use-Package's Modes and interpreters][https://github.com/jwiegley/use-package#modes-and-interpreters]]:

#+begin_quote
Similar to :bind, you can use :mode and :interpreter to establish a deferred binding within the auto-mode-alist and interpreter-mode-alist variables.
...
If you aren't using :commands, :bind, :bind*, :bind-keymap, :bind-keymap*, :mode, :interpreter, or :hook
(all of which imply :defer; see the docstring for use-package for a brief description of each), you can still defer loading with the :defer keyword...
#+end_quote

Quoted from [[Use-Package's Magic handlers][https://github.com/jwiegley/use-package#magic-handlers]]:

#+begin_quote
Similar to :mode and :interpreter, you can also use :magic and :magic-fallback to cause certain function to be run if the beginning of a file matches
a given regular expression.
...
This registers an autoloaded command for pdf-view-mode, defers loading of pdf-tools, and runs pdf-view-mode if the beginning of a buffer matches the string "%PDF".
#+end_quote

Quoted from [[RYO-Modal's Use-package keyword][https://github.com/Kungsgeten/ryo-modal#use-package-keyword]]:

#+begin_quote
Ryo-modal also provides a use-package keyword: :ryo, which is similar to :bind in that it implies :defer t and create autoloads for the bound commands.
The keyword is followed by one or more key-binding commands, using the same syntax as used by ryo-modal-keys...
#+end_quote

Quoted from [[General's Use-package Keywords][https://github.com/noctuid/general.el#use-package-keywords]]:

#+begin_quote
:general is similar to :bind in that it implies :defer t whenever there are bound commands that can be autoloaded
(e.g. it will not imply :defer t if the only bound command is to a lambda, for example). Whenever autoloadable commands are bound,
use-package will create autoloads for them (though this is usually not necessary).
#+end_quote

Quoted from [[General's :ghook Keyword][https://github.com/noctuid/general.el#ghook-keyword]]:

#+begin_quote
:ghook is intended to be used to add a package’s minor mode enabling function to a user-specified hook, so that when hook is run,
the package will be loaded and the mode enabled. This means that :ghook will usually imply :defer t. While it does not always imply :defer t,
it will add any non-lambda functions to :commands (this is the same behavior as :hook).
Though this is usually unnecessary (the commands probably already have autoloads), it will in turn imply :defer t.
#+end_quote

Quoted from [[General's :gfhook Keyword][https://github.com/noctuid/general.el#gfhook-keyword]]:

#+begin_quote
Unlike :ghook, :gfhook never adds functions to :commands and therefore never implies :defer t.
This is because the functions specified are ones that should be run when turning on (or toggling) the mode(s) the package provides.
The specified functions are external to the package, could be called elsewhere, and therefore should not trigger the package to load.
#+end_quote

Also see [[this comment][https://github.com/jwiegley/use-package/issues/738#issuecomment-447631609]].

Note that I assume that [[chords][https://github.com/jwiegley/use-package#use-package-chords]] also defer and create autoloads.

And in my experience... Not a good idea; much too confusing. Use
[[the arguments here][https://www.reddit.com/r/emacs/comments/j2xezg/usepackage_best_practices/]] to decide whether to use this or =:defer <n>= instead.

#+call: hash() :exports none

#+RESULTS:
: 20210601225231422834500

#+name: 20210601225231422834500
#+begin_src emacs-lisp
(setq use-package-always-defer t)
#+end_src

**** keys

#+call: hash() :exports none

#+RESULTS:
: 20210603105149525867500

#+name: 20210603105149525867500
#+begin_src emacs-lisp
(load-file "../.doom.d/naked.el")
(use-package general
    :demand t
    :config
        (general-auto-unbind-keys)
        (general-def :keymaps '(
            minibuffer-local-keymap
            counsel-describe-map
            helm-buffer-map) "M-x" 'exit-minibuffer)
    :custom
        (general-implicit-kbd t)
    :straight t)

;; (general-def :keymaps 'override
;;     (general-chord "zz") '+zen/toggle-fullscreen)
#+end_src

**** modal modes

#+call: hash() :exports none

#+RESULTS:
: 20210601225304341247500

#+name: 20210601225304341247500
#+begin_src emacs-lisp :var map="" :var mode="" :var prefix="" :var short=""
;; Adapted From:
;; Answer: https://emacs.stackexchange.com/a/7381/31428
;; User: https://emacs.stackexchange.com/users/719/adobe
(format-spec "  (toggles (:color blue :pre (progn
                <<20210601225233511900800>>)) (\"%s\" aiern/toggle-%p \"%p\"))
    (all-keymaps (:color blue :pre (progn
                <<20210601225233511900800>>)) (\"%s\" (progn (setq all-keymaps-map '%n) (aiern/%p-show-top-level)) \"%p\"))
:hercules
    (:show-funs #'aiern/%p-hercules-show
    :hide-funs #'aiern/%p-hercules-hide
    :toggle-funs #'aiern/%p-hercules-toggle
    :keymap '%m
    ;; :transient t
    )
:config
    (defun aiern/%p-hercules-toggle nil (interactive))
    (defun aiern/%p-show-top-level nil (interactive)
        (aiern/which-key-show-top-level '%m))
    (add-to-list 'modal-modes '%n)
    (add-to-list 'modal-prefixes \"%p\")

    (defun aiern/toggle-%p nil (interactive)
        (funcall 'aiern/toggle-inner '%n \"%p\" (fbatp %n) '%m))
    (defun aiern/toggle-%p-hercules nil (interactive)
        (funcall 'aiern/toggle-inner '%n \"%p\" (fbatp %n) '%m t))" `((?m . ,map) (?n . ,mode) (?p . ,prefix) (?s . ,short)))
#+end_src

***** hercules

#+call: hash() :exports none

#+RESULTS:
: 20210601225307809867100

#+name: 20210601225307809867100
#+begin_src emacs-lisp
(use-package hercules
    :straight (hercules :type git :host gitlab :repo "jjzmajic/hercules.el" :branch "master")
    :demand t
    :general (:keymaps 'override
        (general-chord "\\\\") 'aiern/toggle-which-key
        (general-chord "\\]") 'map-of-infinity/body)
    :hydra (map-of-infinity (:color blue :pre (progn
                <<20210601225233511900800>>))
            ("`" nil "cancel")
            ("w" hydra/which-key/body "which-key")
            ("h" hydra/hercules/body "hercules")
            ("d" aiern/disable-all-modal-modes "disable all modal modes")
            ("t" toggles/body "toggles")
            ("k" all-keymaps/body "all keymaps"))
        (hydra/which-key (:color blue :pre (progn
                <<20210601225233511900800>>))
            ("`" nil "cancel")
            ("a" aiern/any-popup-showing-p "any popup showing")
            ("h" aiern/which-key--hide-popup "hide-popup")
            ("s" aiern/which-key--show-popup "show-popup")
            ("r" aiern/which-key--refresh-popup "refresh-popup")
            ("t" aiern/toggle-which-key "toggle")
            ("l" aiern/which-key-show-top-level "aiern/toplevel")
            ("L" which-key-show-top-level "toplevel"))
        (hydra/hercules (:color blue :pre (progn
                <<20210601225233511900800>>))
            ("`" nil "cancel")
            ("h" aiern/hercules-hide-all-modal-modes "hide all modal modes"))
        (toggles (:color blue :pre (progn
                <<20210601225233511900800>>)) ("`" nil "cancel"))
        (all-keymaps (:color blue :pre (progn
                <<20210601225233511900800>>)) ("`" nil "cancel"))
    :init
        (setq which-key-enable-extended-define-key t)
        (setq which-key-idle-delay 0.1)
        (setq which-key-idle-secondary-delay nil)
    :custom
        (which-key-allow-evil-operators t)

        ;; NOTE: This will cause the which-key maps for the operator states to show up,
        ;; breaking functionality such as `d 13 <arrow-down>', etc.
        ;; (which-key-show-operator-state-maps t)

        ;; TODO: Choose a fun one!
        (which-key-separator " × ")
        ;; (which-key-separator " |-> ")

        (which-key-popup-type 'side-window)
        (which-key-side-window-location '(right bottom left top))

        ;; If this percentage is too small, the keybindings frame will appear at the bottom
        (which-key-side-window-max-width 0.5)
        
        (which-key-side-window-max-height 0.25))
#+end_src

***** ryo modal

#+call: hash() :exports none

#+RESULTS:
: 20210601225309546041800

#+name: 20210601225309546041800
#+begin_src emacs-lisp
(use-package ryo-modal
    :straight (ryo-modal :type git :host github :repo "kungsgeten/ryo-modal" :branch "master")
    :demand t
    :general (:keymaps 'override (general-chord "  ") 'aiern/toggle-ryo-hercules)
    :hydra+
    <<20210601225304341247500(map="ryo-modal-mode-map", mode="ryo-modal-mode", prefix="ryo", short="r")>>
        ;; From: https://github.com/Kungsgeten/ryo-modal#which-key-integration
        (push '((nil . "ryo:.*:") . (nil . "")) which-key-replacement-alist))
#+end_src

***** evil

#+call: hash() :exports none

#+RESULTS:
: 20210601225311301844400

#+name: 20210601225311301844400
#+begin_src emacs-lisp
(use-package bind-map :straight t)
(use-package evil
    :demand t
    :straight t
    :init (setq-default evil-escape-key-sequence nil)
    :general (:keymaps 'override
        (general-chord "kk") 'aiern/toggle-evil
        (general-chord ",,") 'evil-ex)
    :hydra+
    <<20210601225304341247500(map="evil-normal-state-map", mode="evil-mode", prefix="evil", short="e")>>
        ;; From: https://www.reddit.com/r/emacs/comments/lp45zd/help_requested_in_configuring_ryomodal/gp3rfx9?utm_source=share&utm_medium=web2x&context=3
        ;; Kept for documentation porpoises
        ;; (eval
        ;;       `(ryo-modal-keys
        ;;             ("l l" ,(general-simulate-key ":wq <RET>") :first '(evil-normal-state) :name "wq")
        ;;             ("l p" ,(general-simulate-key ":q <RET>") :first '(evil-normal-state) :name "q")
        ;;             ("l o" ,(general-simulate-key ":w <RET>") :first '(evil-normal-state) :name "w")
        ;;             ("l q" ,(general-simulate-key ":q! <RET>") :first '(evil-normal-state) :name "q!")))

        ;; Use to get command name:
        ;; Eg: (cdr (assoc "q" evil-ex-commands))
        ;; Then "C-x C-e" (eval-last-sexp)
    :ryo
        ("l" :hydra
                '(evil-exits (:color blue :pre (progn
                <<20210601225233511900800>>))
                    ;; From: https://gist.github.com/<<username>>/46b81297d1d3edfbf1e2d72d5e29171e
                    "A hydra for getting the fuck outta' here!"
                    ("`" nil "cancel")
                    ("l" evil-save-and-quit ":wq")
                    ("p" evil-quit ":q")
                    ("o" evil-write ":w")
                    ("O" evil-write-all ":wa")
                    ;; ("q" (funcall (general-simulate-key ":q! <RET>")) ":q!"))
                    ("q" (funcall (evil-quit t)) ":q!"))
                :name "evil exits"))

;; Adapted From: https://github.com/mohsenil85/evil-evilified-state and https://github.com/syl20bnr/spacemacs
(use-package evil-evilified-state
    :after evil
    :straight (evil-evilified-state
        :type git
        :host github
        :repo "<<username>>/evil-evilified-state"
        :branch "master"))
#+end_src

***** god mode

#+call: hash() :exports none

#+RESULTS:
: 20210601225312959948800

#+name: 20210601225312959948800
#+begin_src emacs-lisp
(use-package god-mode
    :straight t
    :general
        (:keymaps 'override
            (general-chord "jj") 'aiern/toggle-god
            (general-chord "';") 'god-execute-with-current-bindings)
    :hydra+
    <<20210601225304341247500(map="global-map", mode="god-local-mode", prefix="god", short="g")>>
        (which-key-enable-god-mode-support))
#+end_src

***** xah-fly-keys

#+call: hash() :exports none

#+RESULTS:
: 20210601225314671168300

#+name: 20210601225314671168300
#+begin_src emacs-lisp
(use-package xah-fly-keys
    :straight t
    :ryo
        ("m" :hydra
            '(modal-modes (:color blue :pre (progn
                <<20210601225233511900800>>))
                "A modal hydra!"
                ("`" nil "cancel")
                ("x" aiern/toggle-xah "xah-fly-keys")) :name "modal modes")
    :hydra+
    <<20210601225304341247500(map="xah-fly-command-map", mode="xah-fly-keys", prefix="xah", short="x")>>)
#+end_src

***** objed

#+call: hash() :exports none

#+RESULTS:
: 20210601225316366565400

#+name: 20210601225316366565400
#+begin_src emacs-lisp
(use-package objed
    :straight t
    :general (:keymaps 'override (general-chord "ii") 'aiern/toggle-objed)
    :hydra+
    <<20210601225304341247500(map="objed-map", mode="objed-mode", prefix="objed", short="o")>>)
#+end_src

***** kakoune

#+call: hash() :exports none

#+RESULTS:
: 20210601225318002941000

#+name: 20210601225318002941000
#+begin_src emacs-lisp
(use-package kakoune
    :straight t
    :hydra+
        (modal-modes (:color blue) ("k" aiern/toggle-kakoune-hercules "kakoune"))
    <<20210601225304341247500(map="ryo-modal-mode-map", mode="ryo-modal-mode", prefix="kakoune", short="k")>>)
#+end_src

***** modalka

#+call: hash() :exports none

#+RESULTS:
: 20210601225319683820700

#+name: 20210601225319683820700
#+begin_src emacs-lisp
(use-package modalka
    :straight t
    ;; :general (:keymaps 'override (general-chord "::") 'aiern/toggle-modalka-hercules)
    :hydra+
    <<20210601225304341247500(map="modalka-mode-map", mode="modalka-mode", prefix="modalka", short="m")>>)
#+end_src

**** org-mode

#+call: hash() :exports none

#+RESULTS:
: 20210601225236550932600

#+name: 20210601225236550932600
#+begin_src emacs-lisp
(use-package org
    :straight t
    :init
        ;; I'm using ox-pandoc
        ;; (setq org-export-backends '(md gfm latex odt org))
        (setq org-directory "/tmp")
        (setq org-roam-directory org-directory)
    :config
        (org-babel-lob-ingest "./README.org")
        <<20210601225401786848500>>
    :general
        (:keymaps 'override
            (naked "backtab") 'aiern/evil-close-fold)
    :ryo ("o" :hydra
        '(hydra-org (:color blue :pre (progn
            <<20210601225233511900800>>))
                "A hydra for org-mode!"
                ("o" org-babel-tangle "tangle")
                ("a" aiern/org-babel-tangle-append "tangle append")
                ("f" org-babel-tangle-file "tangle file")
                ("n" aiern/narrow-or-widen-dwim "narrow")
                ("s" org-edit-special "org edit special")
                ("q" nil "cancel")))
    :custom
        (org-descriptive-links t)
        (org-confirm-babel-evaluate nil)
        (org-startup-folded t)
        (org-src-fontify-natively t)
        ;; (org-src-window-setup 'current-window)
        (org-cycle-emulate-tab 'whitestart))

(with-eval-after-load 'org (load-file "../.doom.d/emacs-bankruptcy/site-lisp/org-numbers-overlay.el"))
(use-package nix-mode
    :straight t
    :commands (org-babel-execute:nix)
    :mode ("\\.nix\\'")
    :after org)
(use-package xonsh-mode
    :straight (xonsh-mode :type git :host github :repo "seanfarley/xonsh-mode" :branch "master")
    :commands (org-babel-execute:xonsh org-babel-expand-body:xonsh)
    :mode ("\\.xonshrc\\'" "\\.xsh\\'")
    :after org)
(use-package dockerfile-mode
    :straight t
    :config
        (org-babel-do-load-languages 'org-babel-load-languages
            (append org-babel-load-languages
                '((Dockerfile . t))))
    :mode ("\\Dockerfile\\'")
    :after org)
(use-package vimrc-mode
    :straight (vimrc-mode :type git :host github :repo "mcandre/vimrc-mode" :branch "master")
    :commands
        (org-babel-execute:vimrc
        org-babel-expand-body:vimrc)
    :mode "\\.vim\\(rc\\)?\\'"
    :after org)
#+end_src

**** minibuffer

#+call: hash() :exports none

#+RESULTS:
: 20210601225321180742600

#+name: 20210601225321180742600
#+begin_src emacs-lisp
<<b7ccdbd9b486c4c7b221f9a885c076dc>>

;; TODO: Split this into multiple `use-package!' instances using my new `hydra+' keyword
(with-eval-after-load 'ryo-modal (ryo-modal-key "x" :hydra
      '(hydra-execute (:color blue :pre (progn
                <<20210601225233511900800>>))
            "A hydra for launching stuff!"
            ("c" counsel-M-x "counsel")
            ("h" helm-smex-major-mode-commands "helm smex major mode")
            ("s" helm-smex "helm smex")
            ("e" execute-extended-command "M-x")
            ("q" nil "cancel"))
            :name "execute order 65"))
#+end_src

***** helm

#+call: hash() :exports none

#+RESULTS:
: 20210601225322706724000

#+name: helm
#+begin_src emacs-lisp
;; Adapted From: https://github.com/clemera/helm-ido-like-guide
(use-package helm-ido-like
    :straight (helm-ido-like
        :type git
        :host github
        :repo "<<username>>/helm-ido-like-guide"
        :branch "master")
    :hook after-init
    :after
        (helm-swoop
        helm-flx
        helm-fuzzier
        helm-smex
        smex
        dash))
#+end_src

**** git

#+call: hash() :exports none

#+RESULTS:
: 20210601225324176915500

#+name: 20210601225324176915500
#+begin_src emacs-lisp
<<20210601225325712716200>>
<<20210601225327334456900>>
;; (use-package! gitattributes-mode)
#+end_src

***** git-gutter

#+call: hash() :exports none

#+RESULTS:
: 20210601225325712716200

#+name: 20210601225325712716200
#+begin_src emacs-lisp
(use-package git-gutter
    :straight t
    :ryo ("g" :hydra
        '(hydra-git (:pre (progn
                <<20210601225233511900800>>))
            "A hydra for git!"
            ("`" nil "cancel" :color blue)
            ("j" git-gutter:next-hunk "next")
            ("k" git-gutter:previous-hunk "previous")
            ("d" git-gutter:popup-hunk "diff")
            ("s" git-gutter:stage-hunk "stage")
            ("r" git-gutter:revert-hunk "revert")
            ("m" git-gutter:mark-hunk "mark"))))
#+end_src

***** magit

#+call: hash() :exports none

#+RESULTS:
: 20210601225327334456900

#+name: 20210601225327334456900
#+begin_src emacs-lisp
(use-package magit
    :straight t
    :ryo ("g" :hydra+
        '(hydra-git (:pre (progn
                <<20210601225233511900800>>))
            "A hydra for git!"
            ("g" magit-status "magit" :color blue))))
#+end_src

**** buffer

#+call: hash() :exports none

#+RESULTS:
: 20210601225332587709700

#+name: 20210601225332587709700
#+begin_src emacs-lisp
;; (remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)

(defun display-startup-echo-area-message nil (aiern/which-key-show-top-level))

(use-package writeroom-mode
    :straight t
    :hook after-init
    :general (:keymaps 'override (general-chord "zz") 'writeroom-mode)
    :custom (writeroom-fullscreen-effect t))

(use-package focus
    :straight t
    ;; :hook (doom-init-ui . focus-mode)
    :custom
        (focus-mode-to-thing '(
            ;; (prog-mode . defun)
            (prog-mode . line)
            ;; (text-mode . sentence)
            (text-mode . line)
            (outline-mode . line))))

;; (when (featurep! :editor parinfer) (use-package! parinfer-rust-mode
;;     :hook emacs-lisp-mode
;;     :init (setq parinfer-rust-auto-download t)
;;     :custom (parinfer-rust-check-before-enable nil)))

(use-package projectile :straight t)
(use-package yasnippet :straight t)
(use-package company :straight t)
(use-package yankpad
    :straight t
    :after (projectile company yasnippet)
    :init
        (setq yankpad-file "./yankpad.org")
        (defun aiern/yankpad-hercules-toggle nil (interactive))
    :general (:keymap 'override
        (general-chord "[[") 'aiern/yankpad-hercules-toggle
        (general-chord "]]") 'yankpad-expand)
    :config (yankpad-map)
    :hercules
        (:show-funs #'aiern/yankpad-hercules-show
            :hide-funs #'aiern/yankpad-hercules-hide
            :toggle-funs #'aiern/yankpad-hercules-toggle
            :keymap 'yankpad-keymap
            ;; :transient t
        ))

(use-package vlf
    :straight (vlf :type git :host github :repo "m00natic/vlfi" :branch "master")
    :demand t
    :custom (vlf-application 'always))

;; !!! THE ORDER HERE MATTERS! !!!
;; (add-hook! doom-init-ui
;;     (load-file "fit-frame.el")
;;     (load-file "autofit-frame.el")
;;     ;; (load-file "buff-menu+.el")
;;     (load-file "compile-.el")
;;     (load-file "compile+.el")
;;     (load-file "grep+.el")
;;     (load-file "dired+.el")
;;     (load-file "dired-details.el")
;;     (load-file "dired-details+.el")
;;     (load-file "doremi.el")
;;     (load-file "hexrgb.el")
;;     (load-file "frame-fns.el")
;;     (load-file "faces+.el")
;;     (load-file "doremi-frm.el")
;;     (load-file "eyedropper.el")
;;     (load-file "facemenu+.el")
;;     (load-file "frame+.el")
;;     (load-file "help+.el")
;;     (load-file "info+.el")
;;     (load-file "menu-bar+.el")
;;     (load-file "mouse+.el")
;;     (load-file "setup-keys.el")
;;     (load-file "strings.el")
;;     ;; (load-file "simple+.el")
;;     (load-file "frame-cmds.el")
;;     (load-file "thumb-frm.el")
;;     (load-file "window+.el")
;;     (load-file "zoom-frm.el")
;;     (load-file "oneonone.el")
;;     (use-package! oneonone
;;         :demand t
;;         :hook (after-init . 1on1-emacs)
;;         :custom
;;             (1on1-minibuffer-frame-width 10000)
;;             (1on1-minibuffer-frame-height 10000)))
#+end_src





**** window manager

#+call: hash() :exports none

#+RESULTS:
: 20210601225346472879400

#+name: 20210601225346472879400
#+begin_src emacs-lisp
<<20210601225348036290600>>
#+end_src

***** exwm

#+call: hash() :exports none

#+RESULTS:
: 20210601225348036290600

#+name: 20210601225348036290600
#+begin_src emacs-lisp
#+end_src

**** system

#+call: hash() :exports none

#+RESULTS:
: 20210601225349590264700

#+name: 20210601225349590264700
#+begin_src emacs-lisp
<<20210601225351155331200>>
<<20210601225352808354500>>
#+end_src

***** paths

Adapted from [[Ergoemacs' Emacs Lisp Code for Setting PATH and exec-path section][http://ergoemacs.org/emacs/emacs_env_var_paths.html]]:

# TODO: Combine the current `$PATH' with `exec-path'

#+call: hash() :exports none

#+RESULTS:
: 20210601225351155331200

#+name: 20210601225351155331200
#+begin_src emacs-lisp
;; (eval `(let ((mypaths
;;     '(
;;         ,(concat "/home/" (getenv "USER") "/.nix-profile/bin")
;;         "/home/linuxbrew/.linuxbrew/bin"
;;         "/usr/bin"
;;         "/usr/sbin"
;;         ,(concat "/home/" (getenv "USER") "/.emacs.d/bin")
;;         ,(concat "/home/" (getenv "USER") "/.doom.d"))))
;;     ;; (setenv "PATH" (mapconcat 'identity mypaths ";") )
;;     (setq exec-path (append mypaths (list "." exec-directory)) )
;; ))
(use-package exec-path-from-shell
    :demand t
    :straight (exec-path-from-shell
        :type git
        :host github
        :repo "purcell/exec-path-from-shell"
        :branch "master"))
#+end_src

***** etc

#+call: hash() :exports none

#+RESULTS:
: 20210601225352808354500

#+name: 20210601225352808354500
#+begin_src emacs-lisp
#+end_src

**** etc

#+call: hash() :exports none

#+RESULTS:
: 20210601225354262898500

#+name: 20210601225354262898500
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
;; (when (featurep! :private spacemacs) (use-package! spacemacs
;;     :init (remove-hook 'org-load-hook #'+org-init-keybinds-h)
;;     :hook (doom-init-ui . spacemacs/home)))
#+end_src